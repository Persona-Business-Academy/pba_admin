generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int             @id @default(autoincrement())
  email                String          @unique
  firstName            String?         @db.VarChar(45)
  lastName             String?         @db.VarChar(45)
  password             String          @db.VarChar(60)
  isVerified           Boolean         @default(false)
  phone                String?         @db.VarChar(60)
  address              String?         @db.VarChar(60)
  country              String?         @db.VarChar(60)
  state                String?         @db.VarChar(60)
  city                 String?         @db.VarChar(60)
  confirmationCode     Int?            @unique
  createdAt            DateTime        @default(now()) @db.Timestamp(0)
  updatedAt            DateTime        @updatedAt @db.Timestamp(0)
  avatar               String?
  onlineCourseComments CourseComment[]
}

model Admin {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  firstName     String?         @db.VarChar(45)
  lastName      String?         @db.VarChar(45)
  password      String          @db.VarChar(60)
  role          AdminRole
  createdAt     DateTime        @default(now()) @db.Timestamp(0)
  updatedAt     DateTime        @updatedAt @db.Timestamp(0)
  CourseComment CourseComment[]
}

model OnlineCourse {
  id                     Int                 @id @default(autoincrement())
  title                  String              @db.VarChar(45)
  subTitle               String              @db.VarChar(45)
  courseLevel            SkillLevel
  coverPhoto             String
  mediaId                String              @unique
  description            String
  duration               Float               @default(0)
  lessonsCount           Int                 @default(0)
  graduatedStudentsCount Int                 @default(0)
  enrolledStudentsCount  Int                 @default(0)
  instructorId           Int
  language               Language
  rating                 Float               @default(0)
  topic                  Topic
  whatYouWillLearn       String[]
  createdAt              DateTime            @default(now()) @db.Timestamp(0)
  updatedAt              DateTime            @updatedAt @db.Timestamp(0)
  Instructor             Instructor          @relation(fields: [instructorId], references: [id])
  comments               CourseComment[]
  days                   OnlineCourseDay[]
  levels                 OnlineCourseLevel[]
  videos                 OnlineCourseVideo[]
}

model OnlineCourseLevel {
  id             Int                 @id @default(autoincrement())
  level          String              @db.VarChar(45)
  createdAt      DateTime            @default(now()) @db.Timestamp(0)
  updatedAt      DateTime            @updatedAt @db.Timestamp(0)
  onlineCourseId Int
  OnlineCourse   OnlineCourse        @relation(fields: [onlineCourseId], references: [id], onDelete: Cascade)
  days           OnlineCourseDay[]
  videos         OnlineCourseVideo[]
}

model OnlineCourseDay {
  id                  Int                 @id @default(autoincrement())
  label               String              @db.VarChar(45)
  createdAt           DateTime            @default(now()) @db.Timestamp(0)
  updatedAt           DateTime            @updatedAt @db.Timestamp(0)
  onlineCourseId      Int
  onlineCourseLevelId Int
  OnlineCourse        OnlineCourse        @relation(fields: [onlineCourseId], references: [id], onDelete: Cascade)
  OnlineCourseLevel   OnlineCourseLevel   @relation(fields: [onlineCourseLevelId], references: [id], onDelete: Cascade)
  videos              OnlineCourseVideo[]
}

model OnlineCourseVideo {
  id                  Int               @id @default(autoincrement())
  key                 String
  name                String
  createdAt           DateTime          @default(now()) @db.Timestamp(0)
  updatedAt           DateTime          @updatedAt @db.Timestamp(0)
  onlineCourseId      Int
  onlineCourseLevelId Int
  onlineCourseDayId   Int
  OnlineCourseDay     OnlineCourseDay   @relation(fields: [onlineCourseDayId], references: [id], onDelete: Cascade)
  OnlineCourse        OnlineCourse      @relation(fields: [onlineCourseId], references: [id], onDelete: Cascade)
  OnlineCourseLevel   OnlineCourseLevel @relation(fields: [onlineCourseLevelId], references: [id], onDelete: Cascade)
}

model CourseComment {
  id              Int            @id @default(autoincrement())
  headline        String
  text            String
  userPicture     String?
  authorId        Int?
  authorAdminId   Int?
  onlineCourseId  Int?
  offlineCourseId Int?
  createdAt       DateTime       @default(now()) @db.Timestamp(0)
  updatedAt       DateTime       @updatedAt @db.Timestamp(0)
  author          User?          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorAdmin     Admin?         @relation(fields: [authorAdminId], references: [id], onDelete: Cascade)
  OnlineCourse    OnlineCourse?  @relation(fields: [onlineCourseId], references: [id], onDelete: Cascade)
  OfflineCourse   OfflineCourse? @relation(fields: [offlineCourseId], references: [id], onDelete: Cascade)
}

model Instructor {
  id                       Int                        @id @default(autoincrement())
  firstName                String                     @db.VarChar(45)
  profession               String                     @db.VarChar(45)
  lastName                 String                     @db.VarChar(45)
  graduatedStudentsCount   Int                        @default(0)
  enrolledStudentsCount    Int                        @default(0)
  about                    String
  avatar                   String
  mediaId                  String                     @unique
  createdAt                DateTime                   @default(now()) @db.Timestamp(0)
  updatedAt                DateTime                   @updatedAt @db.Timestamp(0)
  onlineCourses            OnlineCourse[]
  OfflineCourseInstructors OfflineCourseInstructors[]
}

model OfflineCourse {
  id                       Int                        @id @default(autoincrement())
  title                    String                     @db.VarChar(45)
  subTitle                 String                     @db.Text
  topic                    Topic
  coverPhoto               String
  pdf                      String                     @default("")
  graduationPhoto          String                     @default("")
  mediaId                  String                     @unique
  rating                   Float                      @default(0)
  description              String                     @db.Text
  language                 Language
  ageLimit                 String
  totalDuration            Float                      @default(0)
  courseLevel              SkillLevel
  forKids                  Boolean                    @default(false)
  graduatedStudentsCount   Int                        @default(0)
  enrolledStudentsCount    Int                        @default(0)
  lessonsCount             Int                        @default(0)
  price                    Float
  currency                 Currency
  whatYouWillLearn         String[]
  whatYouWillLearnPhoto    String                     @default("")
  benefits                 Json                       @db.Json
  comments                 CourseComment[]
  createdAt                DateTime                   @default(now()) @db.Timestamp(0)
  updatedAt                DateTime                   @updatedAt @db.Timestamp(0)
  OfflineCourseInstructors OfflineCourseInstructors[]
  OfflineCourseVideo       OfflineCourseVideo[]
  timeline                 OfflineCourseTimeline?
  Applicant                Applicant[]
}

model OfflineCourseVideo {
  id              Int           @id @default(autoincrement())
  key             String
  name            String
  createdAt       DateTime      @default(now()) @db.Timestamp(0)
  updatedAt       DateTime      @updatedAt @db.Timestamp(0)
  offlineCourseId Int
  OfflineCourse   OfflineCourse @relation(fields: [offlineCourseId], references: [id], onDelete: Cascade)
}

model OfflineCourseInstructors {
  id              Int           @id @default(autoincrement())
  offlineCourseId Int
  instructorId    Int
  course          OfflineCourse @relation(fields: [offlineCourseId], references: [id])
  instructor      Instructor    @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@unique([offlineCourseId, instructorId], name: "offlineCourseInstructorId")
}

model OfflineCourseTimeline {
  id              Int           @id @default(autoincrement())
  offlineCourseId Int           @unique
  startDates      DateTime[]
  offlineCourse   OfflineCourse @relation(fields: [offlineCourseId], references: [id], onDelete: Cascade)
}

model Applicant {
  id                       Int            @id @default(autoincrement())
  name                     String
  email                    String
  phoneNumber              String
  attachment               String?
  company                  String?
  message                  String?
  motivationLetter         String?
  hasAgreedToPrivacyPolicy Boolean        @default(true)
  file                     String?        @default("")
  for                      ApplicantType
  offlineCourseId          Int?
  OfflineCourse            OfflineCourse? @relation(fields: [offlineCourseId], references: [id], onDelete: Cascade)
  jobId                    Int?
  Job                      Job?           @relation(fields: [jobId], references: [id])
}

model Job {
  id               Int         @id @default(autoincrement())
  title            String
  salary           String
  workingHours     String
  contractType     String
  description      String
  responsibilities String
  requirements     String
  Applicant        Applicant[]
}

enum ApplicantType {
  OFFLINE_COURSE_APPLICANT
  CONTACT_US_APPLICANT
  JOB_APPLICANT
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum Language {
  EN
  ARM
}

enum Topic {
  DESIGN
  DEVELOPMENT
  DIGITAL_MARKETING
  BUSINESS_LAW
  BUSINESS_ENGLISH
  MANAGEMENT
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  MASTER
}

enum Currency {
  AMD
  USD
}

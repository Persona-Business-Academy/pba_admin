generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  firstName           String?               @db.VarChar(45)
  lastName            String?               @db.VarChar(45)
  password            String                @db.VarChar(60)
  phone               String?               @db.VarChar(60)
  address             String?               @db.VarChar(60)
  country             String?               @db.VarChar(60)
  state               String?               @db.VarChar(60)
  city                String?               @db.VarChar(60)
  confirmationCode    Int?                  @unique
  createdAt           DateTime              @default(now()) @db.Timestamp(0)
  updatedAt           DateTime              @updatedAt @db.Timestamp(0)
  avatar              String?
  onlineCourseComment OnlineCourseComment[]
}

model Admin {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  firstName String?   @db.VarChar(45)
  lastName  String?   @db.VarChar(45)
  password  String    @db.VarChar(60)
  role      AdminRole
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @db.Timestamp(0)
}

model OnlineCourse {
  id                     Int                   @id @default(autoincrement())
  name                   String                @db.VarChar(45)
  createdAt              DateTime              @default(now()) @db.Timestamp(0)
  updatedAt              DateTime              @updatedAt @db.Timestamp(0)
  courseLevel            SkillLevel
  coverPhoto             String
  coverPhotoId           String                @unique
  description            String
  duration               Float                 @default(0)
  graduatedStudentsCount Int                   @default(0)
  instructorId           Int
  language               Language
  rate                   Float?
  topic                  String                @db.VarChar(45)
  whatYouWillLearn       Json                  @db.Json
  Instructor             Instructor            @relation(fields: [instructorId], references: [id])
  comments               OnlineCourseComment[]
  days                   OnlineCourseDay[]
  levels                 OnlineCourseLevel[]
  videos                 OnlineCourseVideo[]
}

model OnlineCourseLevel {
  id             Int                 @id @default(autoincrement())
  level          String              @db.VarChar(45)
  createdAt      DateTime            @default(now()) @db.Timestamp(0)
  updatedAt      DateTime            @updatedAt @db.Timestamp(0)
  onlineCourseId Int
  days           OnlineCourseDay[]
  OnlineCourse   OnlineCourse        @relation(fields: [onlineCourseId], references: [id], onDelete: Cascade)
  videos         OnlineCourseVideo[]
}

model OnlineCourseDay {
  id                  Int                 @id @default(autoincrement())
  label               String              @db.VarChar(45)
  createdAt           DateTime            @default(now()) @db.Timestamp(0)
  updatedAt           DateTime            @updatedAt @db.Timestamp(0)
  onlineCourseId      Int
  onlineCourseLevelId Int
  OnlineCourse        OnlineCourse        @relation(fields: [onlineCourseId], references: [id], onDelete: Cascade)
  OnlineCourseLevel   OnlineCourseLevel   @relation(fields: [onlineCourseLevelId], references: [id], onDelete: Cascade)
  videos              OnlineCourseVideo[]
}

model OnlineCourseVideo {
  id                  Int               @id @default(autoincrement())
  key                 String
  name                String
  createdAt           DateTime          @default(now()) @db.Timestamp(0)
  updatedAt           DateTime          @updatedAt @db.Timestamp(0)
  onlineCourseId      Int
  onlineCourseLevelId Int
  onlineCourseDayId   Int
  OnlineCourseDay     OnlineCourseDay   @relation(fields: [onlineCourseDayId], references: [id], onDelete: Cascade)
  OnlineCourse        OnlineCourse      @relation(fields: [onlineCourseId], references: [id], onDelete: Cascade)
  OnlineCourseLevel   OnlineCourseLevel @relation(fields: [onlineCourseLevelId], references: [id], onDelete: Cascade)
}

model OnlineCourseComment {
  id             Int           @id @default(autoincrement())
  headline       String
  text           String
  authorId       Int
  onlineCourseId Int?
  createdAt      DateTime      @default(now()) @db.Timestamp(0)
  updatedAt      DateTime      @updatedAt @db.Timestamp(0)
  author         User          @relation(fields: [authorId], references: [id])
  OnlineCourse   OnlineCourse? @relation(fields: [onlineCourseId], references: [id], onDelete: Cascade)
}

model Instructor {
  id           Int            @id @default(autoincrement())
  firstName    String         @db.VarChar(45)
  lastName     String         @db.VarChar(45)
  about        String
  avatar       String
  avatarId     String         @unique
  createdAt    DateTime       @default(now()) @db.Timestamp(0)
  updatedAt    DateTime       @updatedAt @db.Timestamp(0)
  onlineCourse OnlineCourse[]
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum Language {
  EN
  ARM
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  MASTER
}
